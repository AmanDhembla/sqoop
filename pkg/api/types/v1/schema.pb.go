// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: schema.proto

package v1

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import v11 "github.com/solo-io/gloo/pkg/api/types/v1"
import v12 "github.com/solo-io/gloo/pkg/api/types/v1"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

//
// The Schema object wraps the user's GraphQL Schema, which is stored as an inline string.
// The Schema Object contains a Status field which is used by Qloo to validate the user's input schema.
type Schema struct {
	// Name of the schema. Schema names must be unique
	//
	// Schema Names must be unique and follow the following syntax rules:
	// One or more lowercase rfc1035/rfc1123 labels separated by '.' with a maximum length of 253 characters.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// name of the resolver map to use to resolve this schema.
	// if the user leaves this empty, Qloo will generate the skeleton of a resolver map for the user
	ResolverMap string `protobuf:"bytes,2,opt,name=resolver_map,json=resolverMap,proto3" json:"resolver_map,omitempty"`
	// inline the entire graphql schema as a string here
	InlineSchema string `protobuf:"bytes,3,opt,name=inline_schema,json=inlineSchema,proto3" json:"inline_schema,omitempty"`
	// Status indicates the validation status of the role resource.
	// Status is read-only by clients, and set by gloo during validation
	Status *v11.Status `protobuf:"bytes,6,opt,name=status" json:"status,omitempty" testdiff:"ignore"`
	// Metadata contains the resource metadata for the role
	Metadata *v12.Metadata `protobuf:"bytes,7,opt,name=metadata" json:"metadata,omitempty"`
}

func (m *Schema) Reset()                    { *m = Schema{} }
func (m *Schema) String() string            { return proto.CompactTextString(m) }
func (*Schema) ProtoMessage()               {}
func (*Schema) Descriptor() ([]byte, []int) { return fileDescriptorSchema, []int{0} }

func (m *Schema) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Schema) GetResolverMap() string {
	if m != nil {
		return m.ResolverMap
	}
	return ""
}

func (m *Schema) GetInlineSchema() string {
	if m != nil {
		return m.InlineSchema
	}
	return ""
}

func (m *Schema) GetStatus() *v11.Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *Schema) GetMetadata() *v12.Metadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func init() {
	proto.RegisterType((*Schema)(nil), "v1.Schema")
}
func (this *Schema) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Schema)
	if !ok {
		that2, ok := that.(Schema)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.ResolverMap != that1.ResolverMap {
		return false
	}
	if this.InlineSchema != that1.InlineSchema {
		return false
	}
	if !this.Status.Equal(that1.Status) {
		return false
	}
	if !this.Metadata.Equal(that1.Metadata) {
		return false
	}
	return true
}

func init() { proto.RegisterFile("schema.proto", fileDescriptorSchema) }

var fileDescriptorSchema = []byte{
	// 257 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x8f, 0x31, 0x4e, 0xc3, 0x30,
	0x14, 0x86, 0xe5, 0x52, 0x05, 0x70, 0xc3, 0x80, 0x05, 0x92, 0xd5, 0x01, 0x4a, 0x58, 0x22, 0xa1,
	0xc6, 0x0a, 0x4c, 0x30, 0x76, 0xef, 0x92, 0x1e, 0xa0, 0x72, 0x5b, 0xd7, 0xb5, 0x14, 0xe7, 0x45,
	0xb1, 0x9b, 0x33, 0x71, 0x15, 0x2e, 0xc1, 0xc0, 0x11, 0x38, 0x01, 0xea, 0xb3, 0xc3, 0xda, 0xed,
	0xf9, 0xfb, 0xff, 0xdf, 0xef, 0x7f, 0x34, 0x75, 0xdb, 0x83, 0xb2, 0xb2, 0x68, 0x3b, 0xf0, 0xc0,
	0x46, 0x7d, 0x39, 0xbd, 0xd3, 0xa0, 0x01, 0x9f, 0xe2, 0x34, 0x05, 0x65, 0xfa, 0xa2, 0x8d, 0x3f,
	0x1c, 0x37, 0xc5, 0x16, 0xac, 0x70, 0x50, 0xc3, 0xdc, 0x80, 0xd0, 0x35, 0x80, 0x90, 0xad, 0x11,
	0x7d, 0x29, 0x9c, 0x97, 0xfe, 0xe8, 0xa2, 0x79, 0x7e, 0xc6, 0x6c, 0x95, 0x97, 0x3b, 0xe9, 0xe3,
	0xd6, 0xec, 0x8b, 0xd0, 0x64, 0x85, 0x35, 0x18, 0xa3, 0xe3, 0x46, 0x5a, 0xc5, 0xc9, 0x8c, 0xe4,
	0xd7, 0x15, 0xce, 0xec, 0x89, 0xa6, 0x9d, 0x72, 0x50, 0xf7, 0xaa, 0x5b, 0x5b, 0xd9, 0xf2, 0x11,
	0x6a, 0x93, 0x81, 0x2d, 0x65, 0xcb, 0x9e, 0xe9, 0x8d, 0x69, 0x6a, 0xd3, 0xa8, 0x75, 0x38, 0x87,
	0x5f, 0xa0, 0x27, 0x0d, 0x30, 0xfe, 0xfd, 0x4e, 0x93, 0xd0, 0x92, 0x27, 0x33, 0x92, 0x4f, 0x5e,
	0x69, 0xd1, 0x97, 0xc5, 0x0a, 0xc9, 0xe2, 0xfe, 0xf7, 0xfb, 0xf1, 0xd6, 0x2b, 0xe7, 0x77, 0x66,
	0xbf, 0xff, 0xc8, 0x8c, 0x6e, 0xa0, 0x53, 0x59, 0x15, 0x03, 0x2c, 0xa7, 0x57, 0x43, 0x67, 0x7e,
	0x89, 0xe1, 0xf4, 0x14, 0x5e, 0x46, 0x56, 0xfd, 0xab, 0x8b, 0xf1, 0xe7, 0xcf, 0x03, 0xd9, 0x24,
	0x78, 0xd8, 0xdb, 0x5f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xcc, 0x06, 0x3b, 0x28, 0x5e, 0x01, 0x00,
	0x00,
}
