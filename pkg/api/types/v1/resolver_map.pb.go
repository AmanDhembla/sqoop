// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: resolver_map.proto

package v1

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

//
// The ResolverMap object maps Resolvers to the fields in the GraphQL Schema
// The skeleton of a Resolver Map will be generated by Qloo automatically when a schema
// is read or updated if one does not alreay exist.
type ResolverMap struct {
	// Name of the Resolver Map. Resolver Map names must be unique
	//
	// Resolver Map Names must be unique and follow the following syntax rules:
	// One or more lowercase rfc1035/rfc1123 labels separated by '.' with a maximum length of 253 characters.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Types is a map of Type Names (defined in the schema) to a TypeResolver, which contain resolvers for the
	// specific fields of the type
	Types map[string]*TypeResolver `protobuf:"bytes,3,rep,name=types" json:"types,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
	// Status indicates the validation status of the role resource.
	// Status is read-only by clients, and set by gloo during validation
	Status *Status `protobuf:"bytes,4,opt,name=status" json:"status,omitempty" testdiff:"ignore"`
	// Metadata contains the resource metadata for the role
	Metadata *Metadata `protobuf:"bytes,5,opt,name=metadata" json:"metadata,omitempty"`
}

func (m *ResolverMap) Reset()                    { *m = ResolverMap{} }
func (m *ResolverMap) String() string            { return proto.CompactTextString(m) }
func (*ResolverMap) ProtoMessage()               {}
func (*ResolverMap) Descriptor() ([]byte, []int) { return fileDescriptorResolverMap, []int{0} }

func (m *ResolverMap) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ResolverMap) GetTypes() map[string]*TypeResolver {
	if m != nil {
		return m.Types
	}
	return nil
}

func (m *ResolverMap) GetStatus() *Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *ResolverMap) GetMetadata() *Metadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

// TypeResolver contains the individual resolvers for each field for a specific type
type TypeResolver struct {
	// This is a map of Field Names to the resolver that Qloo should invoke when a query arrives for that field
	Fields map[string]*Resolver `protobuf:"bytes,1,rep,name=fields" json:"fields,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *TypeResolver) Reset()                    { *m = TypeResolver{} }
func (m *TypeResolver) String() string            { return proto.CompactTextString(m) }
func (*TypeResolver) ProtoMessage()               {}
func (*TypeResolver) Descriptor() ([]byte, []int) { return fileDescriptorResolverMap, []int{1} }

func (m *TypeResolver) GetFields() map[string]*Resolver {
	if m != nil {
		return m.Fields
	}
	return nil
}

// Resolvers define the actual logic Qloo needs to know in order to resolve a specific field query
type Resolver struct {
	// a resolver can have one of three types:
	//
	// Types that are valid to be assigned to Resolver:
	//	*Resolver_GlooResolver
	//	*Resolver_TempalteResolver
	//	*Resolver_CodeResolver
	Resolver isResolver_Resolver `protobuf_oneof:"resolver"`
}

func (m *Resolver) Reset()                    { *m = Resolver{} }
func (m *Resolver) String() string            { return proto.CompactTextString(m) }
func (*Resolver) ProtoMessage()               {}
func (*Resolver) Descriptor() ([]byte, []int) { return fileDescriptorResolverMap, []int{2} }

type isResolver_Resolver interface {
	isResolver_Resolver()
	Equal(interface{}) bool
}

type Resolver_GlooResolver struct {
	GlooResolver *GlooResolver `protobuf:"bytes,1,opt,name=gloo_resolver,json=glooResolver,oneof"`
}
type Resolver_TempalteResolver struct {
	TempalteResolver *TemplateResolver `protobuf:"bytes,2,opt,name=tempalte_resolver,json=tempalteResolver,oneof"`
}
type Resolver_CodeResolver struct {
	CodeResolver *CodeResolver `protobuf:"bytes,3,opt,name=code_resolver,json=codeResolver,oneof"`
}

func (*Resolver_GlooResolver) isResolver_Resolver()     {}
func (*Resolver_TempalteResolver) isResolver_Resolver() {}
func (*Resolver_CodeResolver) isResolver_Resolver()     {}

func (m *Resolver) GetResolver() isResolver_Resolver {
	if m != nil {
		return m.Resolver
	}
	return nil
}

func (m *Resolver) GetGlooResolver() *GlooResolver {
	if x, ok := m.GetResolver().(*Resolver_GlooResolver); ok {
		return x.GlooResolver
	}
	return nil
}

func (m *Resolver) GetTempalteResolver() *TemplateResolver {
	if x, ok := m.GetResolver().(*Resolver_TempalteResolver); ok {
		return x.TempalteResolver
	}
	return nil
}

func (m *Resolver) GetCodeResolver() *CodeResolver {
	if x, ok := m.GetResolver().(*Resolver_CodeResolver); ok {
		return x.CodeResolver
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Resolver) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Resolver_OneofMarshaler, _Resolver_OneofUnmarshaler, _Resolver_OneofSizer, []interface{}{
		(*Resolver_GlooResolver)(nil),
		(*Resolver_TempalteResolver)(nil),
		(*Resolver_CodeResolver)(nil),
	}
}

func _Resolver_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Resolver)
	// resolver
	switch x := m.Resolver.(type) {
	case *Resolver_GlooResolver:
		_ = b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.GlooResolver); err != nil {
			return err
		}
	case *Resolver_TempalteResolver:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.TempalteResolver); err != nil {
			return err
		}
	case *Resolver_CodeResolver:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.CodeResolver); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Resolver.Resolver has unexpected type %T", x)
	}
	return nil
}

func _Resolver_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Resolver)
	switch tag {
	case 1: // resolver.gloo_resolver
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(GlooResolver)
		err := b.DecodeMessage(msg)
		m.Resolver = &Resolver_GlooResolver{msg}
		return true, err
	case 2: // resolver.tempalte_resolver
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(TemplateResolver)
		err := b.DecodeMessage(msg)
		m.Resolver = &Resolver_TempalteResolver{msg}
		return true, err
	case 3: // resolver.code_resolver
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CodeResolver)
		err := b.DecodeMessage(msg)
		m.Resolver = &Resolver_CodeResolver{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Resolver_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Resolver)
	// resolver
	switch x := m.Resolver.(type) {
	case *Resolver_GlooResolver:
		s := proto.Size(x.GlooResolver)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Resolver_TempalteResolver:
		s := proto.Size(x.TempalteResolver)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Resolver_CodeResolver:
		s := proto.Size(x.CodeResolver)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// GlooResolvers are the "meat" of Qloo. GlooResolvers tell Qloo how to invoke a "Gloo Function"
type GlooResolver struct {
	// the Request Template, if specified, will become the body of the HTTP request used to invoke a function through Gloo
	// input parameters, if needed, should be specified in the request template. See Qloo's [Resolver documentation](TODO)
	// for more information on Request Templates.
	RequestTemplate string `protobuf:"bytes,1,opt,name=request_template,json=requestTemplate,proto3" json:"request_template,omitempty"`
	// The response template, if specified, will transform the body of HTTP responses returned by Gloo functions.
	// This field should be used if the object returned by the Gloo Function does not match the type specified in the GraphQL schema.
	// It can also be used to modify or transform responses from their original state. See Qloo's [Resolver documentation](TODO)
	// for more information on Response Templates.
	ResponseTemplate string `protobuf:"bytes,2,opt,name=response_template,json=responseTemplate,proto3" json:"response_template,omitempty"`
	// Optional. Use to set the outbound HTTP Request header `Content-Type`. Defaults to `application/json`
	ContentType string `protobuf:"bytes,3,opt,name=content_type,json=contentType,proto3" json:"content_type,omitempty"`
	// Specify the function the resolver should invoke. The function must be one registered to Gloo.
	//
	// Types that are valid to be assigned to Function:
	//	*GlooResolver_SingleFunction
	//	*GlooResolver_MultiFunction
	Function isGlooResolver_Function `protobuf_oneof:"function"`
}

func (m *GlooResolver) Reset()                    { *m = GlooResolver{} }
func (m *GlooResolver) String() string            { return proto.CompactTextString(m) }
func (*GlooResolver) ProtoMessage()               {}
func (*GlooResolver) Descriptor() ([]byte, []int) { return fileDescriptorResolverMap, []int{3} }

type isGlooResolver_Function interface {
	isGlooResolver_Function()
	Equal(interface{}) bool
}

type GlooResolver_SingleFunction struct {
	SingleFunction *Function `protobuf:"bytes,4,opt,name=single_function,json=singleFunction,oneof"`
}
type GlooResolver_MultiFunction struct {
	MultiFunction *MultiFunction `protobuf:"bytes,5,opt,name=multi_function,json=multiFunction,oneof"`
}

func (*GlooResolver_SingleFunction) isGlooResolver_Function() {}
func (*GlooResolver_MultiFunction) isGlooResolver_Function()  {}

func (m *GlooResolver) GetFunction() isGlooResolver_Function {
	if m != nil {
		return m.Function
	}
	return nil
}

func (m *GlooResolver) GetRequestTemplate() string {
	if m != nil {
		return m.RequestTemplate
	}
	return ""
}

func (m *GlooResolver) GetResponseTemplate() string {
	if m != nil {
		return m.ResponseTemplate
	}
	return ""
}

func (m *GlooResolver) GetContentType() string {
	if m != nil {
		return m.ContentType
	}
	return ""
}

func (m *GlooResolver) GetSingleFunction() *Function {
	if x, ok := m.GetFunction().(*GlooResolver_SingleFunction); ok {
		return x.SingleFunction
	}
	return nil
}

func (m *GlooResolver) GetMultiFunction() *MultiFunction {
	if x, ok := m.GetFunction().(*GlooResolver_MultiFunction); ok {
		return x.MultiFunction
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*GlooResolver) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _GlooResolver_OneofMarshaler, _GlooResolver_OneofUnmarshaler, _GlooResolver_OneofSizer, []interface{}{
		(*GlooResolver_SingleFunction)(nil),
		(*GlooResolver_MultiFunction)(nil),
	}
}

func _GlooResolver_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*GlooResolver)
	// function
	switch x := m.Function.(type) {
	case *GlooResolver_SingleFunction:
		_ = b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SingleFunction); err != nil {
			return err
		}
	case *GlooResolver_MultiFunction:
		_ = b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.MultiFunction); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("GlooResolver.Function has unexpected type %T", x)
	}
	return nil
}

func _GlooResolver_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*GlooResolver)
	switch tag {
	case 4: // function.single_function
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Function)
		err := b.DecodeMessage(msg)
		m.Function = &GlooResolver_SingleFunction{msg}
		return true, err
	case 5: // function.multi_function
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(MultiFunction)
		err := b.DecodeMessage(msg)
		m.Function = &GlooResolver_MultiFunction{msg}
		return true, err
	default:
		return false, nil
	}
}

func _GlooResolver_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*GlooResolver)
	// function
	switch x := m.Function.(type) {
	case *GlooResolver_SingleFunction:
		s := proto.Size(x.SingleFunction)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GlooResolver_MultiFunction:
		s := proto.Size(x.MultiFunction)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// A reference to a function known to Gloo
type Function struct {
	// Name of the Gloo Upstream that provides this function
	Upstream string `protobuf:"bytes,1,opt,name=upstream,proto3" json:"upstream,omitempty"`
	// Name of the function itself. See Gloo documentation for more details on functions in Gloo
	Function string `protobuf:"bytes,2,opt,name=function,proto3" json:"function,omitempty"`
}

func (m *Function) Reset()                    { *m = Function{} }
func (m *Function) String() string            { return proto.CompactTextString(m) }
func (*Function) ProtoMessage()               {}
func (*Function) Descriptor() ([]byte, []int) { return fileDescriptorResolverMap, []int{4} }

func (m *Function) GetUpstream() string {
	if m != nil {
		return m.Upstream
	}
	return ""
}

func (m *Function) GetFunction() string {
	if m != nil {
		return m.Function
	}
	return ""
}

// A reference to a list of functions known to Gloo
type MultiFunction struct {
	// A list of functions with weights. Must have size >= 1
	WeightedFunctions []*WeightedFunction `protobuf:"bytes,1,rep,name=weighted_functions,json=weightedFunctions" json:"weighted_functions,omitempty"`
}

func (m *MultiFunction) Reset()                    { *m = MultiFunction{} }
func (m *MultiFunction) String() string            { return proto.CompactTextString(m) }
func (*MultiFunction) ProtoMessage()               {}
func (*MultiFunction) Descriptor() ([]byte, []int) { return fileDescriptorResolverMap, []int{5} }

func (m *MultiFunction) GetWeightedFunctions() []*WeightedFunction {
	if m != nil {
		return m.WeightedFunctions
	}
	return nil
}

type WeightedFunction struct {
	// the function to call
	Function *Function `protobuf:"bytes,1,opt,name=function" json:"function,omitempty"`
	// Invoking each functoion will be balanced by the ratio of the function's weight to the total weight on a resolver
	Weight uint32 `protobuf:"varint,2,opt,name=weight,proto3" json:"weight,omitempty"`
}

func (m *WeightedFunction) Reset()                    { *m = WeightedFunction{} }
func (m *WeightedFunction) String() string            { return proto.CompactTextString(m) }
func (*WeightedFunction) ProtoMessage()               {}
func (*WeightedFunction) Descriptor() ([]byte, []int) { return fileDescriptorResolverMap, []int{6} }

func (m *WeightedFunction) GetFunction() *Function {
	if m != nil {
		return m.Function
	}
	return nil
}

func (m *WeightedFunction) GetWeight() uint32 {
	if m != nil {
		return m.Weight
	}
	return 0
}

// A Go-template which will return data for a Resolver without making a function call. Template Resolvers can make use
// of Qloo's builtin template functions as well as the data provided by the Params object to the resolver.
// Read more about Templates and Resolvers in Qloo's [Resolver documentation](TODO).
type TemplateResolver struct {
	// the Go template as an inline string
	InlineTemplate string `protobuf:"bytes,1,opt,name=inline_template,json=inlineTemplate,proto3" json:"inline_template,omitempty"`
}

func (m *TemplateResolver) Reset()                    { *m = TemplateResolver{} }
func (m *TemplateResolver) String() string            { return proto.CompactTextString(m) }
func (*TemplateResolver) ProtoMessage()               {}
func (*TemplateResolver) Descriptor() ([]byte, []int) { return fileDescriptorResolverMap, []int{7} }

func (m *TemplateResolver) GetInlineTemplate() string {
	if m != nil {
		return m.InlineTemplate
	}
	return ""
}

// NOTE: currently unsupported
type CodeResolver struct {
	InlineCode string `protobuf:"bytes,1,opt,name=inline_code,json=inlineCode,proto3" json:"inline_code,omitempty"`
}

func (m *CodeResolver) Reset()                    { *m = CodeResolver{} }
func (m *CodeResolver) String() string            { return proto.CompactTextString(m) }
func (*CodeResolver) ProtoMessage()               {}
func (*CodeResolver) Descriptor() ([]byte, []int) { return fileDescriptorResolverMap, []int{8} }

func (m *CodeResolver) GetInlineCode() string {
	if m != nil {
		return m.InlineCode
	}
	return ""
}

func init() {
	proto.RegisterType((*ResolverMap)(nil), "v1.ResolverMap")
	proto.RegisterType((*TypeResolver)(nil), "v1.TypeResolver")
	proto.RegisterType((*Resolver)(nil), "v1.Resolver")
	proto.RegisterType((*GlooResolver)(nil), "v1.GlooResolver")
	proto.RegisterType((*Function)(nil), "v1.Function")
	proto.RegisterType((*MultiFunction)(nil), "v1.MultiFunction")
	proto.RegisterType((*WeightedFunction)(nil), "v1.WeightedFunction")
	proto.RegisterType((*TemplateResolver)(nil), "v1.TemplateResolver")
	proto.RegisterType((*CodeResolver)(nil), "v1.CodeResolver")
}
func (this *ResolverMap) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ResolverMap)
	if !ok {
		that2, ok := that.(ResolverMap)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if len(this.Types) != len(that1.Types) {
		return false
	}
	for i := range this.Types {
		if !this.Types[i].Equal(that1.Types[i]) {
			return false
		}
	}
	if !this.Status.Equal(that1.Status) {
		return false
	}
	if !this.Metadata.Equal(that1.Metadata) {
		return false
	}
	return true
}
func (this *TypeResolver) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TypeResolver)
	if !ok {
		that2, ok := that.(TypeResolver)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Fields) != len(that1.Fields) {
		return false
	}
	for i := range this.Fields {
		if !this.Fields[i].Equal(that1.Fields[i]) {
			return false
		}
	}
	return true
}
func (this *Resolver) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Resolver)
	if !ok {
		that2, ok := that.(Resolver)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.Resolver == nil {
		if this.Resolver != nil {
			return false
		}
	} else if this.Resolver == nil {
		return false
	} else if !this.Resolver.Equal(that1.Resolver) {
		return false
	}
	return true
}
func (this *Resolver_GlooResolver) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Resolver_GlooResolver)
	if !ok {
		that2, ok := that.(Resolver_GlooResolver)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.GlooResolver.Equal(that1.GlooResolver) {
		return false
	}
	return true
}
func (this *Resolver_TempalteResolver) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Resolver_TempalteResolver)
	if !ok {
		that2, ok := that.(Resolver_TempalteResolver)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.TempalteResolver.Equal(that1.TempalteResolver) {
		return false
	}
	return true
}
func (this *Resolver_CodeResolver) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Resolver_CodeResolver)
	if !ok {
		that2, ok := that.(Resolver_CodeResolver)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.CodeResolver.Equal(that1.CodeResolver) {
		return false
	}
	return true
}
func (this *GlooResolver) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlooResolver)
	if !ok {
		that2, ok := that.(GlooResolver)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RequestTemplate != that1.RequestTemplate {
		return false
	}
	if this.ResponseTemplate != that1.ResponseTemplate {
		return false
	}
	if this.ContentType != that1.ContentType {
		return false
	}
	if that1.Function == nil {
		if this.Function != nil {
			return false
		}
	} else if this.Function == nil {
		return false
	} else if !this.Function.Equal(that1.Function) {
		return false
	}
	return true
}
func (this *GlooResolver_SingleFunction) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlooResolver_SingleFunction)
	if !ok {
		that2, ok := that.(GlooResolver_SingleFunction)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SingleFunction.Equal(that1.SingleFunction) {
		return false
	}
	return true
}
func (this *GlooResolver_MultiFunction) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlooResolver_MultiFunction)
	if !ok {
		that2, ok := that.(GlooResolver_MultiFunction)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.MultiFunction.Equal(that1.MultiFunction) {
		return false
	}
	return true
}
func (this *Function) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Function)
	if !ok {
		that2, ok := that.(Function)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Upstream != that1.Upstream {
		return false
	}
	if this.Function != that1.Function {
		return false
	}
	return true
}
func (this *MultiFunction) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MultiFunction)
	if !ok {
		that2, ok := that.(MultiFunction)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.WeightedFunctions) != len(that1.WeightedFunctions) {
		return false
	}
	for i := range this.WeightedFunctions {
		if !this.WeightedFunctions[i].Equal(that1.WeightedFunctions[i]) {
			return false
		}
	}
	return true
}
func (this *WeightedFunction) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WeightedFunction)
	if !ok {
		that2, ok := that.(WeightedFunction)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Function.Equal(that1.Function) {
		return false
	}
	if this.Weight != that1.Weight {
		return false
	}
	return true
}
func (this *TemplateResolver) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TemplateResolver)
	if !ok {
		that2, ok := that.(TemplateResolver)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.InlineTemplate != that1.InlineTemplate {
		return false
	}
	return true
}
func (this *CodeResolver) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CodeResolver)
	if !ok {
		that2, ok := that.(CodeResolver)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.InlineCode != that1.InlineCode {
		return false
	}
	return true
}

func init() { proto.RegisterFile("resolver_map.proto", fileDescriptorResolverMap) }

var fileDescriptorResolverMap = []byte{
	// 620 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x54, 0xcd, 0x6e, 0xd3, 0x40,
	0x10, 0xae, 0x93, 0x36, 0x4a, 0x27, 0x4e, 0xea, 0xac, 0x0a, 0x8a, 0x22, 0x44, 0x8b, 0x0f, 0x10,
	0x84, 0x94, 0xd2, 0x82, 0x54, 0x28, 0xb7, 0x54, 0xb4, 0x15, 0x52, 0x2f, 0xa6, 0x12, 0xc7, 0xc8,
	0xc4, 0x13, 0x63, 0x61, 0x7b, 0x8d, 0x77, 0x9d, 0x2a, 0x77, 0x4e, 0x48, 0xbc, 0x07, 0x2f, 0xc3,
	0x2b, 0x70, 0xe0, 0x11, 0x78, 0x02, 0xb4, 0x7f, 0xf6, 0x36, 0x70, 0xf3, 0x7c, 0xdf, 0x7c, 0x33,
	0xdf, 0xec, 0x4c, 0x02, 0xa4, 0x44, 0x46, 0xd3, 0x15, 0x96, 0xf3, 0x2c, 0x2c, 0xa6, 0x45, 0x49,
	0x39, 0x25, 0xad, 0xd5, 0xf1, 0x78, 0x3f, 0xa6, 0x31, 0x95, 0xe1, 0x91, 0xf8, 0x52, 0xcc, 0xd8,
	0x65, 0x3c, 0xe4, 0x15, 0xd3, 0xd1, 0x20, 0x43, 0x1e, 0x46, 0x21, 0x0f, 0x55, 0xec, 0x7f, 0x6d,
	0x41, 0x2f, 0xd0, 0xe5, 0xae, 0xc3, 0x82, 0x10, 0xd8, 0xce, 0xc3, 0x0c, 0x47, 0xce, 0xa1, 0x33,
	0xd9, 0x0d, 0xe4, 0x37, 0x79, 0x0e, 0x3b, 0x7c, 0x5d, 0x20, 0x1b, 0xb5, 0x0f, 0xdb, 0x93, 0xde,
	0xc9, 0x78, 0xba, 0x3a, 0x9e, 0x5a, 0x9a, 0xe9, 0x8d, 0x20, 0xdf, 0xe6, 0xbc, 0x5c, 0x07, 0x2a,
	0x91, 0xbc, 0x86, 0x8e, 0xea, 0x3a, 0xda, 0x3e, 0x74, 0x26, 0xbd, 0x13, 0x10, 0x92, 0xf7, 0x12,
	0x99, 0xdd, 0xfb, 0xf3, 0xeb, 0x60, 0xc8, 0x91, 0xf1, 0x28, 0x59, 0x2e, 0xcf, 0xfc, 0x24, 0xce,
	0x69, 0x89, 0x7e, 0xa0, 0x05, 0x64, 0x02, 0x5d, 0x63, 0x71, 0xb4, 0x23, 0xc5, 0xae, 0x10, 0x5f,
	0x6b, 0x2c, 0xa8, 0xd9, 0xf1, 0x3b, 0x80, 0xa6, 0x33, 0xf1, 0xa0, 0xfd, 0x19, 0xd7, 0xda, 0xb7,
	0xf8, 0x24, 0x8f, 0x61, 0x67, 0x15, 0xa6, 0x15, 0x8e, 0x5a, 0xb2, 0x8c, 0x27, 0xca, 0x08, 0x81,
	0xb1, 0x1e, 0x28, 0xfa, 0xac, 0xf5, 0xca, 0xf1, 0xbf, 0x3b, 0xe0, 0xda, 0x1c, 0x79, 0x09, 0x9d,
	0x65, 0x82, 0x69, 0xc4, 0x46, 0x8e, 0x1c, 0xfa, 0xc1, 0xa6, 0x7a, 0x7a, 0x21, 0x69, 0x35, 0xb6,
	0xce, 0x1d, 0x5f, 0x42, 0xcf, 0x82, 0xff, 0xe3, 0xc9, 0xbf, 0xeb, 0xc9, 0xb5, 0x9f, 0xd2, 0xf6,
	0xf3, 0xd3, 0x81, 0x6e, 0xed, 0xe5, 0x14, 0xfa, 0x71, 0x4a, 0xe9, 0xdc, 0xac, 0x5d, 0x16, 0xd4,
	0x03, 0x5d, 0xa6, 0x94, 0x9a, 0xc4, 0xab, 0xad, 0xc0, 0x8d, 0xad, 0x98, 0x9c, 0xc3, 0x90, 0x63,
	0x56, 0x84, 0x29, 0xc7, 0x46, 0xac, 0x3a, 0xef, 0xcb, 0x79, 0x30, 0x2b, 0xd2, 0x90, 0xa3, 0x55,
	0xc0, 0x33, 0x02, 0xbb, 0xfb, 0x82, 0x46, 0x56, 0x81, 0x76, 0xd3, 0xfd, 0x9c, 0x46, 0xb6, 0xd8,
	0x5d, 0x58, 0xf1, 0x0c, 0xa0, 0x6b, 0x34, 0xfe, 0xb7, 0x16, 0xb8, 0xb6, 0x55, 0xf2, 0x14, 0xbc,
	0x12, 0xbf, 0x54, 0xc8, 0xf8, 0x9c, 0x6b, 0x17, 0xfa, 0x9d, 0xf6, 0x34, 0x6e, 0xcc, 0x91, 0x67,
	0x30, 0x2c, 0x91, 0x15, 0x34, 0x67, 0xd8, 0xe4, 0xb6, 0x64, 0xae, 0x67, 0x88, 0x3a, 0xf9, 0x11,
	0xb8, 0x0b, 0x9a, 0x73, 0xcc, 0xf9, 0x5c, 0x9c, 0xa2, 0x34, 0xbb, 0x1b, 0xf4, 0x34, 0x26, 0x16,
	0x48, 0x4e, 0x61, 0x8f, 0x25, 0x79, 0x9c, 0xe2, 0x7c, 0x59, 0xe5, 0x0b, 0x9e, 0xd0, 0x5c, 0x5f,
	0xa9, 0xdc, 0xc6, 0x85, 0xc6, 0xae, 0xb6, 0x82, 0x81, 0x4a, 0x33, 0x08, 0x39, 0x83, 0x41, 0x56,
	0xa5, 0x3c, 0x69, 0x74, 0xea, 0x40, 0x87, 0xf2, 0x40, 0x05, 0x63, 0x89, 0xfb, 0x99, 0x0d, 0x88,
	0xc7, 0x30, 0x2a, 0x7f, 0x06, 0xdd, 0xba, 0xe6, 0x18, 0xba, 0x55, 0xc1, 0x78, 0x89, 0x61, 0xa6,
	0xe7, 0xaf, 0x63, 0xc1, 0xd5, 0x9d, 0xd4, 0xbc, 0x4d, 0x8d, 0x1b, 0xe8, 0xdf, 0xe9, 0x48, 0xce,
	0x81, 0xdc, 0x62, 0x12, 0x7f, 0xe2, 0x18, 0xd5, 0xfe, 0xcc, 0xf1, 0xca, 0x65, 0x7f, 0xd0, 0xac,
	0x51, 0x04, 0xc3, 0xdb, 0x0d, 0x84, 0xf9, 0x37, 0xe0, 0x6d, 0xa6, 0x89, 0x1f, 0x64, 0xed, 0xc2,
	0xf9, 0xf7, 0x9d, 0x1a, 0x4f, 0xe4, 0x3e, 0x74, 0x54, 0x49, 0xe9, 0xb6, 0x1f, 0xe8, 0xc8, 0x7f,
	0x03, 0xde, 0xe6, 0xa5, 0x91, 0x27, 0xb0, 0x97, 0xe4, 0x69, 0x92, 0xe3, 0xe6, 0xfa, 0x07, 0x0a,
	0x36, 0x02, 0xff, 0x08, 0x5c, 0xfb, 0xca, 0xc8, 0x01, 0xf4, 0xb4, 0x50, 0x1c, 0x9b, 0x16, 0x81,
	0x82, 0x44, 0xe2, 0x6c, 0xfb, 0xc7, 0xef, 0x87, 0xce, 0xc7, 0x8e, 0xfc, 0x7b, 0x7b, 0xf1, 0x37,
	0x00, 0x00, 0xff, 0xff, 0x19, 0x5e, 0x5f, 0xe8, 0x2c, 0x05, 0x00, 0x00,
}
