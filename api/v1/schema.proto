syntax = "proto3";
package qloo.api.v1;
option go_package = "github.com/solo-io/qloo/pkg/api/types/v1";

import "gogoproto/gogo.proto";
option (gogoproto.equal_all) = true;

// imported from Gloo
import "github.com/solo-io/gloo/api/v1/status.proto";
import "github.com/solo-io/gloo/api/v1/metadata.proto";

/*
    * The Schema object wraps the user's GraphQL Schema, which is stored as an inline string.
    * The Schema Object contains a Status field which is used by Qloo to validate the user's input schema.
*/
message Schema {
    // Name of the schema. Schema names must be unique
    //
    // Schema Names must be unique and follow the following syntax rules:
    // One or more lowercase rfc1035/rfc1123 labels separated by '.' with a maximum length of 253 characters.
    string name = 1;

    // name of the resolver map to use to resolve this schema.
    // if the user leaves this empty, Qloo will generate the skeleton of a resolver map for the user
    string resolver_map = 2;

    // inline the entire graphql schema as a string here
    string inline_schema = 3;

    // Status indicates the validation status of the role resource.
    // Status is read-only by clients, and set by gloo during validation
    gloo.api.v1.Status status = 6 [(gogoproto.moretags) = "testdiff:\"ignore\""];

    // Metadata contains the resource metadata for the role
    gloo.api.v1.Metadata metadata = 7;
}
